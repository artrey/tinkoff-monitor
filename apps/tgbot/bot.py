import functools
import logging
import re

from django.conf import settings
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
    Updater,
)

from apps.tgbot.models import TelegramUser

logger = logging.getLogger(__name__)


def inject_user(func: callable):
    @functools.wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user = TelegramUser.objects.filter(id=update.effective_message.chat_id).first()
        if not user:
            update.effective_message.reply_text(
                text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=ReplyKeyboardRemove(),
            )
        else:
            return func(update, context, *args, **kwargs, user=user)

    return wrapper


def start_command(update: Update, context: CallbackContext):
    data = update.effective_message.from_user.to_dict()
    TelegramUser.objects.update_or_create(id=data.pop("id"), defaults=dict(extra_data=data))
    help_command(update, context)


def help_command(update: Update, context: CallbackContext):
    update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–æ–∑—å–º—É –Ω–∞ —Å–µ–±—è —Ä–∞–±–æ—Ç—É –ø–æ —Å–ª–µ–∂–µ–Ω–∏—é –∑–∞ –¥–µ–Ω—å–≥–∞–º–∏ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–∞—Ö ü§ù\n\n"
        "–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å –±–∞–Ω–∫–æ–º–∞—Ç—ã, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –¥–æ–±—Ä–∞—Ç—å—Å—è, –∞ —è –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â—É —Ç–µ–±–µ"
        " –∫–æ–≥–¥–∞ –≤ –Ω–∏—Ö –ø–æ—è–≤—è—Ç—Å—è –¥–µ–Ω—å–≥–∏. –í—ã–±–∏—Ä–∞–π –±–∞–Ω–∫–æ–º–∞—Ç—ã –ø–æ–±–ª–∏–∂–µ,"
        " –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –Ω–µ —É—Å–ø–µ—Ç—å –∑–∞–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É üò±\n\n"
        "–ó–∞ —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ —è –≤–æ–∑—å–º—É —Å —Ç–µ–±—è 100 —Ä—É–±–ª–µ–π. –ü–ª–∞—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑ - –ø–æ–ª—å–∑—É–π—Å—è –≤—Å–µ–≥–¥–∞ üòâ",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–ë–∞–Ω–∫–æ–º–∞—Ç—ã"), KeyboardButton("–û–ø–ª–∞—Ç–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True,
        ),
    )


@inject_user
def payment_handler(update: Update, context: CallbackContext, user: TelegramUser):
    if user.has_subscription:
        update.effective_message.reply_text(
            text="–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–ª–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üëç",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        update.effective_message.reply_text(
            text="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: https://yandex.ru\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –Ω–∞—á–Ω—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–µ–Ω—å–≥–∞–º–∏ –¥–ª—è —Ç–µ–±—è üòâ",
            reply_markup=ReplyKeyboardRemove(),
        )


ATM_COMMAND, ATM_ADD, ATM_CONFIGURE, ATM_REMOVE, ATM_REMOVE_ALL = range(5)
ATM_COMMANDS_TEXT = {
    ATM_ADD: "–î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫–æ–º–∞—Ç",
    ATM_CONFIGURE: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–Ω–∫–æ–º–∞—Ç",
    ATM_REMOVE: "–£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫–æ–º–∞—Ç",
    ATM_REMOVE_ALL: "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ",
}
ATM_TEXT_COMMAND = {v: k for k, v in ATM_COMMANDS_TEXT.items()}


@inject_user
def atm_start_handler(update: Update, context: CallbackContext, user: TelegramUser):
    choices = ReplyKeyboardMarkup(
        [
            [KeyboardButton(ATM_COMMANDS_TEXT[ATM_ADD]), KeyboardButton(ATM_COMMANDS_TEXT[ATM_CONFIGURE])],
            [KeyboardButton(ATM_COMMANDS_TEXT[ATM_REMOVE]), KeyboardButton(ATM_COMMANDS_TEXT[ATM_REMOVE_ALL])],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    update.effective_message.reply_text(
        text="–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=choices,
    )

    return ATM_COMMAND


@inject_user
def atm_command_handler(update: Update, context: CallbackContext, user: TelegramUser):
    command = ATM_TEXT_COMMAND.get(update.effective_message.text)
    if not command:
        return atm_start_handler(update, context)

    message = {
        ATM_ADD: "–ø–æ –∫–∞–∫–æ–º—É –∞–¥—Ä–µ—Å—É –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–∞–Ω–∫–æ–º–∞—Ç?",
        ATM_CONFIGURE: "ATM_CONFIGURE",
        ATM_REMOVE: "ATM_REMOVE",
        ATM_REMOVE_ALL: "ATM_REMOVE_ALL",
    }[command]
    update.effective_message.reply_text(text=message, reply_markup=ReplyKeyboardRemove())
    return command


@inject_user
def atm_add_handler(update: Update, context: CallbackContext, user: TelegramUser):
    try:
        record_id = int(update.effective_message.text.split()[0].lstrip("/review"))
        record = Record.objects.exclude(status=Record.Status.CANCELLED).get(id=record_id)
        client_phone_number = TelegramUser.objects.get(id=update.effective_message.from_user.id).phone_number
        if record.client_phone_number != client_phone_number:
            raise ValueError("not authenticated")
    except Exception as ex:
        logger.exception(ex)
        update.effective_message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    if Review.objects.filter(record=record).exists():
        update.effective_message.reply_text(
            "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø–æ—Å–µ—â–µ–Ω–∏—é",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    context.chat_data["review_record_id"] = record_id
    update.effective_message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º",
        reply_markup=ReplyKeyboardRemove(),
    )
    return REVIEW_TEXT


def review_text(update: Update, context: CallbackContext, record_id: int):
    context.chat_data["review_text"] = update.effective_message.text
    update.effective_message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5",
        reply_markup=ReplyKeyboardMarkup(
            [["1", "2", "3", "4", "5"]],
            resize_keyboard=True,
            one_time_keyboard=True,
        ),
    )
    return REVIEW_RATING


def review_rating(update: Update, context: CallbackContext, record_id: int):
    rating = int(update.effective_message.text)
    if rating < 1 or rating > 5:
        update.effective_message.reply_text(
            "–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 5",
            reply_markup=ReplyKeyboardMarkup(
                [["1", "2", "3", "4", "5"]],
                resize_keyboard=True,
                one_time_keyboard=True,
            ),
        )
        return REVIEW_RATING

    text = context.chat_data["review_text"]
    record = Record.objects.get(id=record_id)
    services_ids = record.services.values_list("id", flat=True)
    Review.objects.create(
        master_id=record.master_id,
        service_id=services_ids[0] if len(services_ids) == 1 else None,
        record=record,
        text=text,
        rating=rating,
    )

    update.effective_message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END


def review_fallback(update: Update, context: CallbackContext, record_id: int):
    update.effective_message.reply_text(
        "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–∑—ã–≤ –ø–æ —É—Å–ª—É–≥–µ. "
        "–ï—Å–ª–∏ –ø–æ–∑–¥–Ω–µ–µ —Ä–µ—à–∏—Ç–µ —Å–Ω–æ–≤–∞ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ - "
        f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /review{record_id}",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END


def configure_bot() -> Updater:
    updater = Updater(token=settings.TELEGRAM_BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start_command))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(
        MessageHandler(
            Filters.regex(re.compile(r"^–æ–ø–ª–∞—Ç–∞$", re.IGNORECASE)) & ~Filters.command,
            payment_handler,
        )
    )
    dispatcher.add_handler(
        ConversationHandler(
            entry_points=[
                MessageHandler(
                    Filters.regex(re.compile(r"^–±–∞–Ω–∫–æ–º–∞—Ç—ã?$", re.IGNORECASE)) & ~Filters.command,
                    atm_start_handler,
                )
            ],
            states={
                ATM_COMMAND: [MessageHandler(Filters.text & ~Filters.command, atm_command_handler)],
                ATM_ADD: [MessageHandler(Filters.text & ~Filters.command, atm_add_handler)],
                ATM_CONFIGURE: [MessageHandler(Filters.text & ~Filters.command, review_text)],
                ATM_REMOVE: [MessageHandler(Filters.text & ~Filters.command, review_text)],
                ATM_REMOVE_ALL: [MessageHandler(Filters.text & ~Filters.command, review_text)],
                # REVIEW_RATING: [MessageHandler(Filters.regex(r"^\d+$") & ~Filters.command, review_rating)],
            },
            fallbacks=[
                # MessageHandler(Filters.text, atm_fallback)
            ],
            allow_reentry=True,
            # per_message=True,
        )
    )
    dispatcher.add_handler(MessageHandler(Filters.all, help_command))

    return updater
